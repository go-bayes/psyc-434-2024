{
  "hash": "0316bc4233e38b690a2b2764ec5cf3bf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Asking questions in cross-cultural psychology\"\nsubtitle: \"Lab: Getting Started with R\"\ndate: \"2024-FEB-26\"\nbibliography: /Users/joseph/GIT/templates/bib/references.bib\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell caption='dag'}\n::: {.cell-output-display}\n![Causal graph: we will refer to this image in the lecture and begin reviewing this tool in Week 2 ](01-content_files/figure-html/fig-line-plot-1.png){#fig-line-plot width=60%}\n:::\n:::\n\n\n::: {.callout-note}\n## Background readings: none today!\n\n- If you want to get started, download R and Rstudio as below\n- List of recommended readings at the end of this lecture.\n:::\n\n::: {.callout-important}\n## Key concepts for the test(s):\n\nToday we introduce the following topics relevant to the Test(s)\n\n- Confounding  (introduced in week 2)\n- Internal Validity (introduced in week 2)\n- External Validity (introduced in week 3)\n\nToday we discuss these concepts informally. We will define these concepts formally in technical detail in **week 2**.\n:::\n\n\n# Lecture: Introduction to the Course\n\n## Slides\n\n[PREVIEW](/slides/01-slides.html)\n\n<div>\n\n\n```{=html}\n<iframe class=\"slide-deck\" src=\"/slides/01-slides.html\"></iframe>\n```\n\n\n</div>\n\nOpen in browser [here](/slides/01-slides.html){target=\"_blank\"}\n\n\n\n\n# Lab 1: Installing R and RStudio\n\n## Why learn R?\n\nThis session introduces R and R-Studio. \n\n- Essential for your final report.\n- Supports your psychology coursework.\n- Enhances your coding skills, crucial for navigating AI advancements.\n- Coding can become as enjoyable as music or languages over time.\n\n## Installing R\n\n1. Visit the Comprehensive R Archive Network (CRAN) at [https://cran.r-project.org/](https://cran.r-project.org/).\n2. Select the version of R suitable for your operating system (Windows, Mac, or Linux).\n3. Download and install it by following the on-screen instructions.\n\n## Installing RStudio\n\nAfter Downloading R...\n\n### Step 1: Installing R-Studio\n\nAssume you have downloaded and installed R from the Comprehensive R Archive Network (CRAN).\n\n1. Go to the RStudio download page at [https://www.rstudio.com/products/rstudio/download/](https://www.rstudio.com/products/rstudio/download/).\n2. Choose the free version of RStudio Desktop, and download it for your operating system.\n3. Download and install RStudio Desktop.\n4. Open RStudio to begin setting up your project environment.\n\n\n### Step 2: Create a new project\n\n1. In RStudio, go to `File > New Project`.\n2. Choose `New Directory` for a new project or `Existing Directory` if you have a folder where you want to initialise an RStudio project.\n3. For a new project, select `New Project`, then provide a directory name. This name will also be the name of your project.\n4. Specify the location where the project folder will be created.\n5. Click `Create Project`.\n\n### Step 3: Give project structure\n\n1. **Organising Files and Folders:**\n   - Within your project, create folders to organise your scripts and data. Common folder names include `R/` for R scripts, `data/` for datasets, and `doc/` for documentation.\n   - You can create these folders using RStudio's `Files` pane or through your operating system's file explorer.\n\n2. **Creating and Managing R Scripts:**\n   - To create a new R script, go to `File > New File > R Script`.\n   - Save the script in your project directory's `R/` folder to keep your work organised. Use meaningful file names that describe the script's purpose.\n\n3. **Version Control:**\n   - If you are familiar with version control, you can initialise a Git repository within your project by selecting the `Version Control` option when creating a new project.\n   - This allows for better tracking of changes and collaboration if working with others.\n   - If you are not familiar with version control (or have not installed `git` on your machine), do not worry about initialising a Git repository \n\n### Step 4: Working with R-scripts\n\n1. **Writing and Executing Code:**\n   - Write your R code in the *script editor.* \n   - Execute code by selecting lines and pressing `Ctrl + Enter` (Windows/Linux) or `Cmd + Enter` (Mac).\n\n2. **Commenting and Documentation:**\n   - Use comments (preceded by `#`) to document your code for clarity and future reference.\n\n3. **Saving and Organising Scripts:**\n   - Regularly save your scripts (`Ctrl + S` or `Cmd + S`).\n   - Organise scripts into folders within your project for different analyses or data processing tasks.\n\n\n### Step 5: Exit R-studio\n\n- Before concluding your work, save your workspace or clear it to start fresh in the next session (`Session > Restart R`).\n\n::: {.callout-note  title=\"Exercise 1\",  icon=false}\n\n\n::: {.callout-tip}\n## Order your R-studio/R workflow\n\n- Clear folder structure\n- Clearly defined script names\n- Annotate your code\n:::\n\n\n::: {.callout-note  title=\"Exercise 1\",  icon=false}\n### Exercise 1: Install the `tidyverse` package\n\nFollow these instructions to install the `tidyverse` package in RStudio:\n\n1. **Open RStudio:** Launch the RStudio application on your computer.\n\n2. **Access Package Installation:**\n   - Navigate to the menu at the top of RStudio and click on `Tools > Install Packages...`. This opens the Install Packages dialogue box.\n\n3. **Install `tidyverse`:**\n   - In the Install Packages dialogue box, you will see a field labelled \"Packages (separate multiple with space or comma):\". Click in this field and type `tidyverse`.\n   - Below the packages field, ensure the checkbox for `Install dependencies` is checked. This ensures all packages that `tidyverse` depends on are also installed.\n   - Click the `Install` button to begin the installation process.\n\n4. **Begin installation:**\n    - Click on the \"Install\" button to start the installation process.\n\n5. **Wait for completion:** The installation might take a few minutes. Monitor the progress in the \"Console\" pane. Once the installation is complete, you will see a message in the console indicating that the process has finished.\n\n6. **Loading `tidyverse`:** After successful installation, you can load the `tidyverse` package into your R session by typing `library(tidyverse)` in the console and pressing `Enter`.\n:::\n\n\n## Basic R Commands\n\n::: {.callout-note}\nCopy R-code from the code blocks by hovering your cursor over the top right of the code panel.\n:::\n\n### Assignment (`<-`)\n\nAssignment in R is done using the `<-` operator. It assigns values to variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10 # assigns the value 10 to x\ny <- 5 # assigns the value 5 to y\n\n# this does the same\nx = 10\ny = 5\n\n# note what happens when we do this\n# 10 = 5 # not run\n\n# but we can do this\n# 10 == 5 # considered below\n```\n:::\n\n\n### Concatenation (`c()`)\n\nThe `c()` function combines multiple elements into a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers <- c(1, 2, 3, 4, 5) #  a vector of numbers\nprint(numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n### Operations (`+`, `-`)\n\nBasic arithmetic operations include addition (`+`) and subtraction (`-`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum <- x + y # adds x and y\n\nprint(sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n\n```{.r .cell-code}\ndifference <- x - y # subtracts y from x\n\n# note we did not need to use the `print()` function \ndifference\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\nIn addition to assignment, multiplication and division are fundamental arithmetic operations in R that allow you to manipulate numeric data. Here is how you can incorporate these operations into your basic R commands documentation:\n\n### Multiplication (`*`) and Division (`/`)\n\nMultiplication and division in R are performed using the `*` and `/` operators, respectively. These operators allow for element-wise operations on vectors, as well as operations on individual numeric values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# multiplication\nproduct <- x * y # multiplies x by y\nproduct\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 50\n```\n\n\n:::\n\n```{.r .cell-code}\n# division\nquotient <- x / y # divides x by y\nquotient\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\n# element-wise multiplication on vectors\nvector1 <- c(1, 2, 3)\nvector2 <- c(4, 5, 6)\nvector_product <- vector1 * vector2 # multiplies each element of vector1 by the corresponding element of vector2\nvector_product\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  4 10 18\n```\n\n\n:::\n\n```{.r .cell-code}\n# element-wise division on vectors\nvector_division <- vector1 / vector2 # divides each element of vector1 by the corresponding element of vector2\nvector_division\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.25 0.40 0.50\n```\n\n\n:::\n:::\n\n\n- Multiplication and division can be used for scalar (single values) and vector (multiple values) operations. When applied to vectors, these operations are performed element-wise.\n- Be mindful of division by zero, as this will result in `Inf` (infinity) or `NaN` (not a number) depending on the context.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# example of division by zero\nresult <- 10 / 0 # results in Inf\nzero_division <- 0 / 0 # results in NaN\n```\n:::\n\n\n- R also supports integer division using the `%/%` operator and modulo operation using `%%` to find the remainder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# integer division\ninteger_division <- 10 %/% 3 # results in 3\n\n# modulo operation\nremainder <- 10 %% 3 # results in 1\n```\n:::\n\n\n### Logic (`!`, `!=`, `==`)\n\nLogical operations include NOT (`!`), NOT EQUAL (`!=`), and EQUAL (`==`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_not_y <- x != y # checks if x is not equal to y\nx_not_y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nx_equal_10 <- x == 10 # checks if x is equal to 10\nx_equal_10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nLogical operations are fundamental in R for controlling the flow of execution and making decisions based on conditions. In addition to NOT (`!`), NOT EQUAL (`!=`), and EQUAL (`==`), there are several other logical operators you should know:\n\n### OR (`|` and `||`)\n\n- The `|` operator performs element-wise logical OR operation. It evaluates each pair of elements in two logical vectors to see if at least one is `TRUE`.\n- The `||` operator performs a logical OR operation but only evaluates the first element of each vector. It's mainly used in if statements and not for vectorised operations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# element-wise OR\nvector_or <- c(TRUE, FALSE) | c(FALSE, TRUE) # returns c(TRUE, TRUE)\n\n# single OR (only looks at first element)\nsingle_or <- TRUE || FALSE # returns TRUE\n```\n:::\n\n\n### AND (`&` and `&&`)\n\n- The `&` operator performs element-wise logical AND operations. It checks if both elements in the corresponding positions of two logical vectors are `TRUE`.\n- The `&&` operator performs a logical AND operation but only evaluates the first element of each vector. Like `||`, it's used in conditions that do not require vectorised operations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# element-wise AND\nvector_and <- c(TRUE, FALSE) & c(FALSE, TRUE) # returns c(FALSE, FALSE)\n\n# single AND (only looks at first element)\nsingle_and <- TRUE && FALSE # returns FALSE\n```\n:::\n\n\n## Working with Strings\n\nStrings are sequences of characters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- \"world\" # assigns a string to name\ngreeting <- paste(\"Hello,\", name) # Concatenates strings\n\n#print\ngreeting\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello, world\"\n```\n\n\n:::\n:::\n\n\n## Factors\n\nFactors are used to represent categorical data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngender <- factor(c(\"Male\", \"Female\", \"Female\", \"Male\"))\n\nhead(gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Male   Female Female Male  \nLevels: Female Male\n```\n\n\n:::\n:::\n\n\n### Ordered Factors\n\nTo create an ordered factor, you use the `factor()` function with the `ordered` argument set to `TRUE`, or you can directly use the `ordered()` function. You can also specify the levels in their natural order using the `levels` argument if the default order does not match the natural sequence.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# using factor() function with ordered = TRUE\neducation_levels <- c(\"High School\", \"Bachelor\", \"Master\", \"Ph.D.\")\neducation_factor <- factor(education_levels, ordered = TRUE)\n\n# alternatively, using ordered() function\neducation_ordered <- ordered(education_levels)\n\n# specifying levels explicitly\neducation_ordered_explicit <- factor(education_levels, levels = c(\"High School\", \"Bachelor\", \"Master\", \"Ph.D.\"), ordered = TRUE)\n```\n:::\n\n\n### Operations with Ordered Factors\n\nOrdered factors allow for comparison operations that make sense in their context, such as less than (`<`), greater than (`>`), etc., based on their order.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Comparing educational levels\nedu1 <- ordered(\"Bachelor\", levels = c(\"High School\", \"Bachelor\", \"Master\", \"Ph.D.\"))\nedu2 <- ordered(\"Master\", levels = c(\"High School\", \"Bachelor\", \"Master\", \"Ph.D.\"))\n\n# Check if edu2 is a higher degree than edu1\nedu2 > edu1 # Returns TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nOrdered factors can be useful in statistical models where the order impacts the model, such as ordinal logistic regression. The order of the factor levels can influence the model's interpretation and coefficients. **We will return to ordered factors and ordered/logistic regression later in the course.**\n\n### Checking Data with Ordered Factors\n\nYou can view the structure and summary of ordered factors just as with regular factors, but the output will indicate the order.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# viewing the structure\nstr(education_ordered)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Ord.factor w/ 4 levels \"Bachelor\"<\"High School\"<..: 2 1 3 4\n```\n\n\n:::\n\n```{.r .cell-code}\n# summary to see the distribution\nsummary(education_ordered)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Bachelor High School      Master       Ph.D. \n          1           1           1           1 \n```\n\n\n:::\n:::\n\n\n### Modifying Ordered Factors\n\nIf you need to change the order of levels or add new levels, you can re-factor the variable using `factor()` or `ordered()` and specify the new levels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# adding a new level and reordering\nnew_levels <- c(\"Primary School\", \"High School\", \"Bachelor\", \"Master\", \"Ph.D.\")\neducation_updated <- factor(education_levels, levels = new_levels, ordered = TRUE)\n```\n:::\n\n\n\n## Working with Vectors\n\nVectors are one of R's most fundamental data structures, essential for storing and manipulating a sequence of data elements. They are homogenous, meaning all elements in a vector must be of the same type (e.g., all numeric, all character, etc.). Here's an overview of vectors in R, including how to create, access, and manipulate them.\n\nVectors in R can be created using the `c()` function, which stands for concatenate or combine:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric vector\nnumeric_vector <- c(1, 2, 3, 4, 5)\n\n# Character vector\ncharacter_vector <- c(\"apple\", \"banana\", \"cherry\")\n\n# Logical vector\nlogical_vector <- c(TRUE, FALSE, TRUE, FALSE)\n```\n:::\n\n\n\n### Manipulating Vectors\n\nYou can modify vectors by adding new elements, changing existing elements, or removing elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# adding an element\nnumeric_vector <- c(numeric_vector, 6)  # Adds 6 to the end of numeric_vector\nnumeric_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\n#print\nnumeric_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n\n```{.r .cell-code}\n# changing an element\nnumeric_vector[1] <- 10  # Changes the first element to 10\n\n#show\nnumeric_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10  2  3  4  5  6\n```\n\n\n:::\n:::\n\n\nYou can access elements of a vector by using square brackets `[ ]` with an index or a vector of indices:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#  the first element of numeric_vector\nfirst_element <- numeric_vector[1]\n\n#show\nfirst_element\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# multiple elements\nsome_elements <- numeric_vector[c(2, 4)]  # Gets the 2nd and 4th elements\n\n#show\nfirst_element\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\n### Vector Operations\n\nR allows you to perform operations on vectors in a very intuitive way. Operations are vectorised, meaning they are applied element-wise:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# arithmetic operations\nvector_sum <- numeric_vector + 10  # Adds 10 to each element\n#show\nvector_sum\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20 12 13 14 15 16\n```\n\n\n:::\n\n```{.r .cell-code}\n# vector mutliplication\nvector_multiplication <- numeric_vector * 2  # Multiplies each element by 2\n#show\nvector_multiplication\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20  4  6  8 10 12\n```\n\n\n:::\n\n```{.r .cell-code}\n# logical operations\nvector_greater_than_three <- numeric_vector > 3  # Returns a logical vector\n\n#show\nvector_greater_than_three\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE  TRUE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n\n### Functions with vectors\n\nR provides a rich set of functions for statistical computations and manipulations that work with vectors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# statistical summary\nvector_mean <- mean(numeric_vector)\nvector_mean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nvector_sum <- sum(numeric_vector)\nvector_sum\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n\n```{.r .cell-code}\n# sorting\nsorted_vector <- sort(numeric_vector)\nsorted_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  3  4  5  6 10\n```\n\n\n:::\n\n```{.r .cell-code}\n# unique values\nunique_vector <- unique(character_vector)\nunique_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"apple\"  \"banana\" \"cherry\"\n```\n\n\n:::\n:::\n\n\n### Manipulating vectors\n\nYou can modify vectors by adding new elements, changing existing elements, or removing elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# adding an element\nnumeric_vector <- c(numeric_vector, 6)  # Adds 6 to the end of numeric_vector\nnumeric_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10  2  3  4  5  6  6\n```\n\n\n:::\n\n```{.r .cell-code}\n# changing an element\nnumeric_vector[1] <- 10  # Changes the first element to 10\n\n#show new\nnumeric_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10  2  3  4  5  6  6\n```\n\n\n:::\n:::\n\n\n## Working with Data Frames\n\n### Creating Data Frames\n\nData frames can be created using the `data.frame()` function, specifying each column and its values. Here's a simple example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(25, 30, 35),\n  Gender = c(\"Female\", \"Male\", \"Male\")\n)\n\n# check structure\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Age Gender\n1   Alice  25 Female\n2     Bob  30   Male\n3 Charlie  35   Male\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  3 variables:\n $ Name  : chr  \"Alice\" \"Bob\" \"Charlie\"\n $ Age   : num  25 30 35\n $ Gender: chr  \"Female\" \"Male\" \"Male\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name                Age          Gender         \n Length:3           Min.   :25.0   Length:3          \n Class :character   1st Qu.:27.5   Class :character  \n Mode  :character   Median :30.0   Mode  :character  \n                    Mean   :30.0                     \n                    3rd Qu.:32.5                     \n                    Max.   :35.0                     \n```\n\n\n:::\n:::\n\n\nIn this example, `df` is a data frame with three columns (`Name`, `Age`, `Gender`) and three rows, each representing a different individual.\n\n### Accessing Data Frame Elements\n\n**There are often several ways to do the same thing in R**. You can access the elements of a data frame in several ways:\n\n- **By Column Name:** Use the `$` operator followed by the column name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames <- df$Name  # extracts the `Name` column\n```\n:::\n\n\n- **By Row and Column:** Use the `[row, column]` indexing. Rows or columns can be specified by number or name.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsecond_person <- df[2, ]  # extracts the second row\nage_column <- df[, \"Age\"]  # extracts the `Age` column\n\n# show\nsecond_person\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Name Age Gender\n2  Bob  30   Male\n```\n\n\n:::\n\n```{.r .cell-code}\nage_column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25 30 35\n```\n\n\n:::\n:::\n\n\n- **Using `subset()` Function:** To extract subsets of the data frame based on conditions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadults <- subset(df, Age > 18)  # extracts rows where `Age` is greater than 18\n\nsummary(adults$Age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   25.0    27.5    30.0    30.0    32.5    35.0 \n```\n\n\n:::\n\n```{.r .cell-code}\nmean(adults$Age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n\n```{.r .cell-code}\nmin(adults$Age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25\n```\n\n\n:::\n:::\n\n\n\n### Manipulating Data Frames\n\nData frames are flexible; they can be manipulated in various ways, such as: \n\n- **Adding Columns:** You can add new columns using the `$` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$Employed <- c(TRUE, TRUE, FALSE)  # adds a new column \"Employed\"\n\n# show\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Age Gender Employed\n1   Alice  25 Female     TRUE\n2     Bob  30   Male     TRUE\n3 Charlie  35   Male    FALSE\n```\n\n\n:::\n:::\n\n\n- **Adding Rows:** Use the `rbind()` function to add new rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_person <- data.frame(Name = \"Diana\", Age = 28, Gender = \"Female\", Employed = TRUE)\ndf <- rbind(df, new_person)\n\n# show\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Age Gender Employed\n1   Alice  25 Female     TRUE\n2     Bob  30   Male     TRUE\n3 Charlie  35   Male    FALSE\n4   Diana  28 Female     TRUE\n```\n\n\n:::\n:::\n\n\n- **Modifying Values:** Access the element or column and assign it a new value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# note double brackets\n\ndf[4, \"Age\"] <- 26  # changes Alice's age to 26\n\n# view row\ndf[4, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Name Age Gender Employed\n4 Diana  26 Female     TRUE\n```\n\n\n:::\n:::\n\n\n- **Removing Columns or Rows:** Set columns to `NULL` to remove them, or use `-` with row or column indices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Age Gender Employed\n1   Alice  25 Female     TRUE\n2     Bob  30   Male     TRUE\n3 Charlie  35   Male    FALSE\n4   Diana  26 Female     TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# remove employed column\ndf$Employed <- NULL  # removes the Employed column\n\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Age Gender\n1   Alice  25 Female\n2     Bob  30   Male\n3 Charlie  35   Male\n4   Diana  26 Female\n```\n\n\n:::\n\n```{.r .cell-code}\n# remove fourth row (Diana)\ndf <- df[-4, ]  # removes the fourth row\n\n#show  \ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Age Gender\n1   Alice  25 Female\n2     Bob  30   Male\n3 Charlie  35   Male\n```\n\n\n:::\n:::\n\n\n### Viewing Data Structure (`summary()`, `str()`, `head()`, `tail()`)\n\n- `summary()`: Provides a summary of an object's structure.\n- `str()`: Displays the structure of an object.\n- `head()`: Shows the first few rows of a data frame or the first elements of a vector.\n- `tail()`: Shows the last few rows of a data frame or the last elements of a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# iris is a preloaded dataset\nstr(iris) # displays structure of scores_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(iris) # summary statistics\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n```\n\n\n:::\n\n```{.r .cell-code}\nhead(iris) # first few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(iris) # last few rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n145          6.7         3.3          5.7         2.5 virginica\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n```\n\n\n:::\n:::\n\n\n### mean()\n\n- Calculates the arithmetic mean of a numerical object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\n\n# we will cover R’s powerful simulation functions like `rnorm()`next week\nvector <- rnorm(n = 40, mean = 0, sd = 1)\nmean(vector)  # note the sampling error here\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2401853\n```\n\n\n:::\n:::\n\n\n### sd()\n\n- Computes the standard deviation, which measures the amount of variation or dispersion of a set of values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(vector)  # replace 'vector' with your numerical vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.038425\n```\n\n\n:::\n:::\n\n\n### min() and max()\n\n- These functions return a numerical object's minimum and maximum values, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin(vector)  # minimum value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.817956\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(vector)  # maximum value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.196834\n```\n\n\n:::\n:::\n\n\n### table()\n\n- Generates a frequency table of an object, useful for categorical data. It counts the number of occurrences of each unique element.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#  seed for reproducibility\nset.seed(12345)\n\n#  two categorical variables\nGender <- sample(c(\"Male\", \"Female\"), \n                 size = 100, \n                 replace = TRUE, \n                 prob = c(0.5, 0.5))\nEducation_Level <- sample(c(\"High School\", \"Bachelor\", \"Master\"),\n                          size = 100, \n                          replace = TRUE, \n                          prob = c(0.4, 0.4, 0.2))\n# create a data frame\ndf_table_example <- data.frame(Gender, Education_Level)\n\n# show\nhead(df_table_example)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Gender Education_Level\n1   Male        Bachelor\n2   Male     High School\n3   Male          Master\n4   Male     High School\n5 Female     High School\n6 Female          Master\n```\n\n\n:::\n:::\n\n\n### Cross-Tabulation with table()\n\n- `table()` can also be used for cross-tabulation, providing a way to analyse the relationship between two or more factors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(df_table_example$Gender, df_table_example$Education_Level)  # crosstab\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        \n         Bachelor High School Master\n  Female       14          19     15\n  Male         21          18     13\n```\n\n\n:::\n:::\n\n\nThis produces a contingency table showing the counts at each combination of `factor1` and `factor2` levels.\n\n\n\n###  Explore Data Frames\n\n- **Data Exploration:** Functions like `head()`, `tail()`, and `str()` help you explore the first few rows, last few rows, and the structure of the data frame, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# show\nhead(df)  # First six rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Age Gender\n1   Alice  25 Female\n2     Bob  30   Male\n3 Charlie  35   Male\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(df)  # Last six rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Age Gender\n1   Alice  25 Female\n2     Bob  30   Male\n3 Charlie  35   Male\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(df)   # Structure of the data frame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  3 variables:\n $ Name  : chr  \"Alice\" \"Bob\" \"Charlie\"\n $ Age   : num  25 30 35\n $ Gender: chr  \"Female\" \"Male\" \"Male\"\n```\n\n\n:::\n:::\n\n\n###  Summary Statistics\n\nUse `summary()` to get a summary of each column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# show\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name                Age          Gender         \n Length:3           Min.   :25.0   Length:3          \n Class :character   1st Qu.:27.5   Class :character  \n Mode  :character   Median :30.0   Mode  :character  \n                    Mean   :30.0                     \n                    3rd Qu.:32.5                     \n                    Max.   :35.0                     \n```\n\n\n:::\n:::\n\n\n## First Data Visualisation with `ggplot2`\n\n`ggplot2` is a powerful and flexible R package for creating elegant data visualisations. It is based on the Grammar of Graphics, allowing users to build plots layer by layer, making it versatile for creating a wide range of plots.\n\n#### Installing and Loading `ggplot2`\n\nBefore using `ggplot2`, ensure it's installed and loaded into your R session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load ggplot2\nif (!require(ggplot2)) install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n# seed for reproducibility\nset.seed(12345)\n\n# simulate student data (more on simulation next week)\nstudent_data <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Ethan\", \"Fiona\", \"George\", \"Hannah\"),\n  Score = sample(80:100, 8, replace = TRUE), # Random scores between 80 and 100\n  stringsAsFactors = FALSE\n)\n\n# determine pass/fail based on score\n# we will cover the ifelse() operator in detail in upcoming weeks\nstudent_data$Passed <- ifelse(student_data$Score >= 90, \"Passed\", \"Failed\")\n\n# convert 'Passed' to factor for colour coding in ggplot2\nstudent_data$Passed <- factor(student_data$Passed, levels = c(\"Failed\", \"Passed\"))\n\n# view the first few rows of the data frame\nhead(student_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Score Passed\n1   Alice    93 Passed\n2     Bob    98 Passed\n3 Charlie    95 Passed\n4   Diana    90 Passed\n5   Ethan    81 Failed\n6   Fiona    90 Passed\n```\n\n\n:::\n\n```{.r .cell-code}\n# simulate study hours\nstudent_data$Study_Hours <- sample(5:15, 8, replace = TRUE)\n```\n:::\n\n\n### Basic Components of a `ggplot2` Plot\n\n- **Data:** The dataset you want to visualise.\n- **Aesthetics (`aes`):** Defines how data are mapped to colour, size, shape, and other visual properties.\n- **Geometries (`geom_` functions):** The type of plot or layer you want to add (e.g., points, lines, bars).\n\n#### Creating a Basic Plot\n\nLet's start by creating a simple bar plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(student_data, aes(x = Name, y = Score)) +\n  geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](01-content_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\nThis code plots `Score` for each `Name` in the `student_data` dataframe. The `stat = \"identity\"` argument tells `ggplot2` to use the `Score` values directly to determine the height of the bars.\n\n#### Customizing the plot\n\nTo enhance your plot, you can add titles, change axis labels, and modify colours:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(student_data, aes(x = Name, y = Score, fill = Passed)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = c(\"TRUE\" = \"blue\", \"FALSE\" = \"red\")) +\n  labs(title = \"Student Scores\", x = \"Student Name\", y = \"Score\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](01-content_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n- `aes(fill = Passed)`: Maps the `Passed` variable to the colour fill of the bars, allowing for colour differentiation based on whether students passed or failed.\n- `scale_fill_manual()`: Customizes the colours used for the `TRUE` and `FALSE` values of the `Passed` variable.\n- `labs()`: Adds a main title and axis labels.\n- `theme_minimal()`: Applies a minimalistic theme to the plot for a cleaner appearance.\n\n\n### Scatter Plot with `ggplot2`\n\nA scatter plot is useful for examining the relationship between two continuous variables. While our `student_data` doesn't naturally lend itself to a scatter plot, let's simulate a scenario where we're comparing student scores against study hours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create  scatter plot\nggplot(student_data, aes(x = Study_Hours, y = Score, color = Passed)) +\n  geom_point(size = 4) +\n  labs(title = \"Student Scores vs. Study Hours\", x = \"Study Hours\", y = \"Score\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"Failed\" = \"red\", \"Passed\" = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](01-content_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n### Box Plot with `ggplot2`\n\nBox plots are excellent for visualising the distribution of scores by pass/fail status, highlighting medians, quartiles, and potential outliers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create box plot\nggplot(student_data, aes(x = Passed, y = Score, fill = Passed)) +\n  geom_boxplot() +\n  labs(title = \"Score Distribution by Pass/Fail Status\", x = \"Status\", y = \"Score\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Failed\" = \"red\", \"Passed\" = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](01-content_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n### Histogram with `ggplot2`\n\nHistograms are helpful for understanding the distribution of a single continuous variable, such as scores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a histogram\nggplot(student_data, aes(x = Score, fill = Passed)) +\n  geom_histogram(binwidth = 5, color = \"black\", alpha = 0.7) +\n  labs(title = \"Histogram of Scores\", x = \"Score\", y = \"Count\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Failed\" = \"red\", \"Passed\" = \"blue\"))\n```\n\n::: {.cell-output-display}\n![](01-content_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n### Line Plot with `ggplot2` (Time Series)\n\nFor demonstrating a line plot, let's simulate monthly study hours over a semester for a student.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# simulate monthly study hours\nmonths <- factor(month.abb[1:8], levels = month.abb[1:8])\nstudy_hours <- c(10, 12, 15, 13, 14, 16, 18, 17)\n\n# make data frame\nstudy_data <- data.frame(Month = months, Study_Hours = study_hours)\n\n# create a line plot\nggplot(study_data, aes(x = Month, y = Study_Hours, group = 1)) +  # Explicitly define a group\n  geom_line(linewidth = 1, color = \"blue\") +  # Corrected to use `aes(linewidth = 1)`\n  geom_point(color = \"red\", size = 1) +\n  labs(title = \"Monthly Study Hours\", x = \"Month\", y = \"Study Hours\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](01-content_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\n## Summary\n\nCongratulations on completing Lab 1! This session has laid the groundwork. We've covered a lot, but we'll have a good deal of practice throughout the course. \n\n### What We Have Learned\n\n- **How to install and setup R:** \n\nYou've successfully installed R and RStudio, setting up your workstation for statistical analysis.\n  \n- **How to install and use RStudio:** \n\nYou've familiarised yourself with the RStudio interface, including the console, source editor, environment tab, and other utilities for effective data analysis.\n  \n- **Basic R operations:** \n\nYou've practided using R for basic arithmetic operations, understanding how to execute simple commands in the console.\n  \n- **Basic R Data Structures such as:** \n\n  - **Vectors and Matrices:** You have learned to create and manipulate vectors and matrices, the simplest forms of data storage in R, which are crucial for handling numeric, character, and logical data types in a structured manner.\n\n  - **Data Frames:** You've been introduced to data frames, a key data structure in R for storing tabular data. Data frames accommodate columns of different data types, making them highly versatile for data analysis and manipulation.\n\n  - **Factors and Ordered Factors:** Understanding factors and ordered factors has provided you with the tools to handle categorical data effectively, including the ability to manage and analyse data involving categorical variables with both unordered and ordered levels.\n\n- **Basics of `ggplot2`:**\n\nYou've been equipped with the fundamentals of data visualisation using `ggplot2`, including how to create basic plots like bar charts, scatter plots, and line graphs. You've learned about the importance of aesthetics (`aes`) and geometries (`geom_` functions) in creating visually appealing and informative graphics.\n\n- **Customizing Plots:** \n\nTechniques for enhancing plots with titles, axis labels, and custom colour schemes have been covered. You've practised making your visualisations more informative and engaging by customising plot aesthetics.\n\n\n### How to Build Skills?\n\n- **Practical Application:** \n\nDo the hands-on exercises at home. They'll help you apply what you have learned here.\n\n\n\n### Where to Get Help\n\nAs sure as night follows day, you will need help coding. Good resources:\n\n1. **Large Language Models (LLMs):** OpenAI's premium LLM (GPT-4) outperforms the free version (GPT-3.5) for complex queries. I don't think LLM's are quite ready for science, but they are remarkably helpful for coding, and for learning how to code. So please use them, with caution, but use them. \n\n2. [**Stack Overflow:**](https://stackoverflow.com/questions/tagged/r) a valuable resource for coding advice and solutions.\n\n3. [Cross-validated](https://stats.stackexchange.com/) is probably the best place to go for stats advice. (LLMs are currently not reliable for statisticis for which there is not much information -- which is most of science.)\n\n4. **Developer Websites and GitHub Pages:** Directly engage with package developers and the community for insights and support.[Parameters package discussion page](https://github.com/easystats/parameters/discussions) offers insights and support directly from its developers and user community.\n\n4.  Your tutors and lecturer. We care. We’re here to help you!\n\n\n### Recommended Reading\n\n- Wickham, H., & Grolemund, G. (2016). *R for Data Science*. O'Reilly Media. [Available online](https://r4ds.had.co.nz\n\n\n- A helpful resource for learning R is Megan Hall's lecture available at: [https://meghan.rbind.io/talk/neair/](https://meghan.rbind.io/talk/neair/).\n\n- RStudio has compiled numerous accessible materials for learning R, which can be found here: [https://education.rstudio.com/learn/beginner/](https://education.rstudio.com/learn/beginner/).\n\n- Materials from a previous course on learning R can be accessed here.  [https://go-bayes.github.io/psych-447/](https://education.rstudio.com/learn/beginner/) For now, only lecture 1 would be relevant. It's worth noting that this lecture covers working with GitHub.  GitHub is a useful tool, you should learn how to use it; however, it is not a requirement for the current course.\n\n\n### Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreport::cite_packages()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  - Chang W (2023). _extrafont: Tools for Using Fonts_. R package version 0.19, <https://CRAN.R-project.org/package=extrafont>.\n  - R Core Team (2023). _R: A Language and Environment for Statistical Computing_. R Foundation for Statistical Computing, Vienna, Austria. <https://www.R-project.org/>.\n  - Wickham H (2016). _ggplot2: Elegant Graphics for Data Analysis_. Springer-Verlag New York. ISBN 978-3-319-24277-4, <https://ggplot2.tidyverse.org>.\n  - Xie Y (2023). _tinytex: Helper Functions to Install and Maintain TeX Live, and Compile LaTeX Documents_. R package version 0.49, <https://github.com/rstudio/tinytex>. Xie Y (2019). \"TinyTeX: A lightweight, cross-platform, and easy-to-maintain LaTeX distribution based on TeX Live.\" _TUGboat_, *40*(1), 30-32. <https://tug.org/TUGboat/Contents/contents40-1.html>.\n```\n\n\n:::\n:::\n\n\n\n## Appendix A: At Home Exercises\n\n\n::: {.callout-note  title=\"Exercise 2\",  icon=false}\n\n### Exercise 2: Install the `parameters` and `report` packages\n\nTo install the `parameters` and `report` packages in RStudio, follow these instructions:\n\n1. **Open RStudio:** start by launching the RStudio application on your computer.\n\n2. **Access Package Installation:**\n   - Go to the RStudio menu bar at the top of the screen and click on `Tools > Install Packages...`. This action opens the Install Packages dialogue box.\n\n3. **Install `parameters` and `report`:**\n   - In the Install Packages dialogue box, locate the field labelled \"Packages (separate multiple with space or comma):\". Click in this field and type `parameters, report`, separating the package names with a comma.\n   - Make sure the checkbox for `Install dependencies` is selected. This ensures that any additional packages needed by `parameters` and `report` are also installed.\n   - Click the `Install` button to initiate the installation of both packages and their dependencies.\n\n:::\n\n\n::: {.callout-note  title=\"Exercise 4\",  icon=false}\n### Exercise 4: Basic Operations and Data Structure Manipulation\n\n**Objective:** Practice creating vectors and performing basic arithmetic operations.\n\n1. Create two numeric vectors, `vector_a` and `vector_b`, with the following values:\n   - `vector_a`: 2, 4, 6, 8\n   - `vector_b`: 1, 3, 5, 7\n\n2. Perform the following operations and store the results in new variables:\n   - Add `vector_a` and `vector_b`.\n   - Subtract `vector_b` from `vector_a`.\n   - Multiply `vector_a` by 2.\n   - Divide `vector_b` by 2.\n\n3. Calculate the mean and standard deviation of both `vector_a` and `vector_b`.\n::: \n\n\n::: {.callout-note  title=\"Exercise 5\",  icon=false}\n### Exercise 5: Working with Data Frames\n\n**Objective:** Gain familiarity with data frame creation, manipulation, and basic data exploration functions.\n\n1. Create a data frame `student_data` with the following columns:\n   - `ID`: 1, 2, 3, 4\n   - `Name`: Alice, Bob, Charlie, Diana\n   - `Score`: 88, 92, 85, 95\n   - Ensure you set `stringsAsFactors = FALSE`.\n\n2. Add a new column `Passed` to `student_data` indicating whether the student passed. Assume a pass mark of 90.\n\n3. Extract the `Name` and `Score` of students who passed into a new data frame.\n\n4. Use `summary()`, `head()`, and `str()` functions to explore `student_data`.\n::: \n\n\n::: {.callout-note  title=\"Exercise 6\",  icon=false}\n### Exercise 6: Logical Operations and Subsetting\n\n**Objective:** Practice using logical operations to subset data frames.\n\n1. Using the `student_data` data frame from Exercise 2, subset the data to find students who scored above the mean score of the class.\n\n2. Create a vector `attendance` with values (`Present`, `Absent`, `Present`, `Present`) corresponding to each student's attendance.\n\n3. Add `attendance` as a new column to `student_data` and then subset the data frame to select only the rows where students were present.\n:::\n\n\n::: {.callout-note  title=\"Exercise 7\",  icon=false}\n### Exercise 4: Cross-Tabulation and Analysis\n\n**Objective:** Understand the use of `table()` function for cross-tabulation and analysis.\n\n1. Create two-factor variables:\n   - `Fruit`: Apple, Banana, Apple, Orange, Banana\n   - `Color`: Red, Yellow, Green, Orange, Green\n\n2. Convert `Fruit` and `Color` into factors and then into a data frame named `fruit_data`.\n\n3. Use the `table()` function to perform a cross-tabulation of `Fruit` by `Color`.\n\n4. Interpret the results. Which fruit has the most colour variety?\n:::\n\n::: {.callout-note  title=\"Exercise 8\",  icon=false}\n### Exercise 8: Visualization with `ggplot2`\n\n**Objective:** (If `ggplot2` was introduced) Create a simple plot to visualise the data.\n\n1. Install and load the `ggplot2` package if not already done.\n\n2. Using `student_data`, create a bar plot showing the scores of students. Use `Name` for the x-axis and `Score` for the y-axis.\n\n3. Enhance the plot by adding a title, x and y-axis labels, and use different colours for passed and failed students.\n\nThese exercises are designed to be progressively challenging, ensuring that students apply what they've learned about basic operations, data frame manipulation, logical operations, and simple data analysis and visualisation in R.\n:::\n\n\n#### Solutions \n\n- Exercises 1 and 2 have no solutions. Installation worked or it did not! If you have trouble, please see your tutor or instructor. \n\n### Solution Exercise 4: Basic Operations and Data Structure Manipulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# e.g. create vectors\nvector_a <- c(2, 4, 6, 8)\nvector_b <- c(1, 3, 5, 7)\n\n# operations\nsum_vector <- vector_a + vector_b\ndiff_vector <- vector_a - vector_b\ndouble_vector_a <- vector_a * 2\nhalf_vector_b <- vector_b / 2\n\n#view\nsum_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3  7 11 15\n```\n\n\n:::\n\n```{.r .cell-code}\ndiff_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\ndouble_vector_a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  4  8 12 16\n```\n\n\n:::\n\n```{.r .cell-code}\nhalf_vector_b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5 1.5 2.5 3.5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Mean and Standard Deviation\nmean_a <- mean(vector_a)\nsd_a <- sd(vector_a)\nmean_b <- mean(vector_b)\nsd_b <- sd(vector_b)\n\n# view\nmean_a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nsd_a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.581989\n```\n\n\n:::\n\n```{.r .cell-code}\nmean_b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nsd_b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.581989\n```\n\n\n:::\n:::\n\n\n### Solution 5: Working with Data Frames\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create data frame\nstudent_data <- data.frame(\n  ID = 1:4,\n  Name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\"),\n  Score = c(88, 92, 85, 95),\n  stringsAsFactors = FALSE\n)\n\n# add `Passed` column\nstudent_data$Passed <- student_data$Score >= 90\n\n# subset students who passed\npassed_students <- student_data[student_data$Passed == TRUE, ]\n\n# explore data frame\nsummary(student_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       ID           Name               Score         Passed       \n Min.   :1.00   Length:4           Min.   :85.00   Mode :logical  \n 1st Qu.:1.75   Class :character   1st Qu.:87.25   FALSE:2        \n Median :2.50   Mode  :character   Median :90.00   TRUE :2        \n Mean   :2.50                      Mean   :90.00                  \n 3rd Qu.:3.25                      3rd Qu.:92.75                  \n Max.   :4.00                      Max.   :95.00                  \n```\n\n\n:::\n\n```{.r .cell-code}\nhead(student_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ID    Name Score Passed\n1  1   Alice    88  FALSE\n2  2     Bob    92   TRUE\n3  3 Charlie    85  FALSE\n4  4   Diana    95   TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(student_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t4 obs. of  4 variables:\n $ ID    : int  1 2 3 4\n $ Name  : chr  \"Alice\" \"Bob\" \"Charlie\" \"Diana\"\n $ Score : num  88 92 85 95\n $ Passed: logi  FALSE TRUE FALSE TRUE\n```\n\n\n:::\n:::\n\n\n### Solution 6: Logical Operations and Subsetting\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset data based on score\nmean_score <- mean(student_data$Score)\nstudents_above_mean <- student_data[student_data$Score > mean_score, ]\n\n# add attendance and subset\nattendance <- c(\"Present\", \"Absent\", \"Present\", \"Present\")\nstudent_data$Attendance <- attendance\npresent_students <- student_data[student_data$Attendance == \"Present\", ]\n```\n:::\n\n\n### Solution 7: Cross-Tabulation and Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create factor variables\nFruit <- factor(c(\"Apple\", \"Banana\", \"Apple\", \"Orange\", \"Banana\"))\nColor <- factor(c(\"Red\", \"Yellow\", \"Green\", \"Orange\", \"Green\"))\n\n# create data frame\nfruit_data <- data.frame(Fruit, Color)\n\n# cross-tabulation\nfruit_color_table <- table(fruit_data$Fruit, fruit_data$Color)\nprint(fruit_color_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        \n         Green Orange Red Yellow\n  Apple      1      0   1      0\n  Banana     1      0   0      1\n  Orange     0      1   0      0\n```\n\n\n:::\n\n```{.r .cell-code}\n# interpretation: Apple has the most colour variety with 2 colours (Red, Green).\n```\n:::\n\n\n### Solution 8: Visualization with `ggplot2`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install and load ggplot2\nif (!require(ggplot2)) install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n# create bar plot\nggplot(student_data, aes(x = Name, y = Score, fill = Passed)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = c(\"TRUE\" = \"blue\", \"FALSE\" = \"red\")) +\n  labs(title = \"Student Scores\", x = \"Name\", y = \"Score\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](01-content_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n\n\n## Appendix C: Other Data Types You May Encounter\n\n\n#### Arrays and Matrices\n\nArrays are multi-dimensional data structures, while matrices are two-dimensional.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix_1 <- matrix(1:9, nrow = 3) # creates a 3x3 matrix\narray_1 <- array(1:12, dim = c(2, 3, 2)) # creates a 2x3x2 array\n```\n:::\n\n\n#### Convert Matrix to Data Frame\n\nA `data.frame` is used for storing tabular data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# change matrix to array:\ndf_matrix_1 <- data.frame( matrix_1 )\n\nstr(df_matrix_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  3 variables:\n $ X1: int  1 2 3\n $ X2: int  4 5 6\n $ X3: int  7 8 9\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(df_matrix_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  X1 X2 X3\n1  1  4  7\n2  2  5  8\n3  3  6  9\n```\n\n\n:::\n\n```{.r .cell-code}\n# change colnames\nnew_colnames <- c(\"col_1\", \"col_2\", \"col_3\")\n\ncolnames(df_matrix_1)<- new_colnames\n\n# check\nstr(df_matrix_1)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  3 variables:\n $ col_1: int  1 2 3\n $ col_2: int  4 5 6\n $ col_3: int  7 8 9\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(df_matrix_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  col_1 col_2 col_3\n1     1     4     7\n2     2     5     8\n3     3     6     9\n```\n\n\n:::\n:::\n\n\n\n\n\n### Working with Lists in R\n\n#### Creating lists\n\nTo create a list, you use the `list()` function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a simple list\nmy_list <- list(name = \"John Doe\", age = 30, scores = c(90, 80, 70))\n\n# A list containing various types of elements, including another list\ncomplex_list <- list(id = 1, name = \"Jane Doe\", preferences = list(color = \"blue\", hobby = \"reading\"))\n```\n:::\n\n\n#### Accessing list elements\n\nList elements can be accessed using the `[[ ]]` notation for single elements, or the `$` notation if you're accessing named elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Accessing elements\nname <- my_list$name  # or my_list[[\"name\"]]\n\npreference_color <- complex_list$preferences$color\n```\n:::\n\n\n#### Modifying lists\n\nLists can be modified by adding new elements, changing existing elements, or removing elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adding a new element\nmy_list$gender <- \"Male\"\n\n# Changing an existing element\nmy_list$age <- 31\n\n# Removing an element\nmy_list$scores <- NULL\n```\n:::\n\n\n#### Lists in Functions\n\nLists are often used as return values for functions that need to provide multiple pieces of data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function returning a list\ncalculate_stats <- function(numbers) {\n  mean_val <- mean(numbers)\n  sum_val <- sum(numbers)\n  return(list(mean = mean_val, sum = sum_val))\n}\n\n# Using the function\nresults <- calculate_stats(c(1, 2, 3, 4, 5))\n```\n:::\n\n\n#### Why Lists are Important\n\n- **Flexibility:** lists can contain different types of elements, including other lists, data frames, and functions.\n- **Function outputs:** many R functions return lists because they can hold multiple types of outputs.\n\n\n\n<!-- ## Appendix C: Sundry -->\n\n<!-- #### Using Logical Operators in Conditions -->\n\n<!-- These operators are often used in conditional statements and loops: -->\n\n<!-- ```{r} -->\n<!-- if (x > 0 && y > 0) { -->\n<!--   print(\"both x and y are positive\") -->\n<!-- } -->\n<!-- z <- c(TRUE, FALSE, TRUE) -->\n<!-- w <- c(FALSE, TRUE, TRUE) -->\n<!-- combined_logic <- z | w # element-wise OR -->\n\n<!-- combined_logic -->\n<!-- ``` -->\n\n\n",
    "supporting": [
      "01-content_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}